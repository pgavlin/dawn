load("golang//:go_binary.dawn", "go_binary")

version = "0.1.0"

debug = parse_flag("debug", type=bool, help="True to run a debug build")

dawn_gen_builtins = go_binary(
    name="dawn-gen-builtins",
	dir_label="//cmd/dawn-gen-builtins",
    docs="Builds the dawn-gen-builtins tool for generating Starlark builtin wrappers.",
)

@target(deps=[dawn_gen_builtins], sources=["./cmd/dawn/repl_builtins.go"], generates=["./cmd/dawn/builtins.go"])
def dawn_cli_builtins():
    """
    Generates wrappers + documentation for CLI-only builtin functions.
    """

    sh.exec("dawn-gen-builtins ./cmd/dawn ./cmd/dawn/builtins.go ./docs/source/modules")


@target(deps=[dawn_gen_builtins], sources=["project.go", "project_builtins.go"], generates=["builtins.go", "docs/source/modules"])
def dawn_builtins():
    """
    Generates wrappers + documentation for builtin functions.
    """

    sh.exec("dawn-gen-builtins . builtins.go docs/source/modules")

ldflags = f"-X main.version={version}"

dawn = go_binary(
    name="dawn",
	dir_label="//cmd/dawn",
    docs="Builds the dawn CLI.",
	debug=debug,
    ldflags=ldflags,
)

all_dawn_deps = []
for goos in ["darwin", "linux", "windows"]:
    for goarch in ["amd64", "arm64"]:
        output = os.path.join("dist", f"dawn_{goos}_{goarch}", "dawn")
        bin = go_binary(name="dawn", dir_label="//cmd/dawn", ldflags=ldflags, output=output, docs=f"Builds the dawn CLI for {goos}/{goarch}.", goos=goos, goarch=goarch, disable_cgo=True)
        all_dawn_deps.append(bin)

@target(deps=all_dawn_deps)
def dawn_goreleaser():
    """
    Builds the dawn CLI for various (OS, architecture) pairs and copies the
    results to the location expected by Goreleaser.
    """

@target(deps=[":dawn", "docs:site"])
def default():
    """
    Builds the dawn CLI and docs.
    """
