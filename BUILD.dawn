load("golang//:go_binary.dawn", "go_binary")
load("//cmd/dawn-gen-builtins", "gen_builtins")

version = "0.1.0"

debug = parse_flag("debug", type=bool, help="True to run a debug build")

all_go_sources=os.glob(include=["**.go"], exclude=[".dawn/**"])

@target(sources=all_go_sources)
def format():
    """
    Formats all of the project's Go sources.
    """
    for f in all_go_sources:
        sh.exec(f"gofumpt -w {f}")

@target(sources=all_go_sources)
def lint():
    """
    Runs golangci-lint.
    """
    sh.exec("golangci-lint run")

gen_builtins("cli_builtins", "./cmd/dawn", "./cmd/dawn/builtins.go")
gen_builtins()

ldflags = f"-X main.version={version}"

dawn = go_binary(
    name="dawn",
	dir_label="//cmd/dawn",
    docs="Builds the dawn CLI.",
	debug=debug,
    ldflags=ldflags,
)

all_dawn_deps = []
for goos in ["darwin", "linux", "windows"]:
    for goarch in ["amd64", "arm64"]:
        output = os.path.join("dist", f"dawn_{goos}_{goarch}", "dawn")
        bin = go_binary(name="dawn", dir_label="//cmd/dawn", ldflags=ldflags, output=output, docs=f"Builds the dawn CLI for {goos}/{goarch}.", goos=goos, goarch=goarch, disable_cgo=True)
        all_dawn_deps.append(bin)

@target(deps=all_dawn_deps)
def dawn_goreleaser():
    """
    Builds the dawn CLI for various (OS, architecture) pairs and copies the
    results to the location expected by Goreleaser.
    """

@target(deps=[lint, dawn, "docs:site"])
def default():
    """
    Builds the dawn CLI and docs.
    """
