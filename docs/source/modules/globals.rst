:code:`globals`
=================



.. py:module:: globals



.. py:class:: Cache

       A Cache provides a simple, concurrency-safe string -> value map
       for use by dawn programs.
       



.. py:method:: Cache.once(key, callable)

   once calls the given callable if and only if key is not present in the cache.

   The result is stored in the cache under the given key.
   





.. py:class:: Target

       A Target represents a dawn build target. Targets are created using the
       target function.
       


.. py:attribute:: Target.label

           The target's label.
           

.. py:attribute:: Target.always

           True if the target should always be considered out-of-date.
           

.. py:attribute:: Target.env

           The target's environment (its globals, defaults, and free variables).
           

.. py:attribute:: Target.dependencies

           A list of the target's dependencies as stringified labels.
           

.. py:attribute:: Target.sources

           A list of the target's sources as absolute host paths.
           

.. py:attribute:: Target.generates

           A list of the files generated by the target as absolute host paths.
           






.. py:attribute:: host

       Provides information about the host on which dawn is running.
       

.. py:attribute:: package

       The name of the package that contains the executing Starlark module.
       


.. py:function:: path(label)

   Returns the absolute OS path that corresponds to the given label.
   

.. py:function:: label(path)

   Returns the label that corresponds to the given OS path, if any.
   

.. py:function:: contains(path)

   Returns the label that corresponds to the given OS path if the path is
   contained in the current project. If the path is not contained in the
   current project, contains returns (None, False).
   

.. py:function:: parse_flag(name, default=None, type=None, choices=None, required=None, help=None)

   Defines and parses a new project flag in the current package.

   :param name: the name of the flag.
   :param default: the default value for the flag, if any.
   :param type: the type to which the flag's argument should be converted. Defaults to str.
   :param choices: the valid values for the flag. Defaults to any value.
   :param required: True if the flag must be set.
   :param help: the help string for the flag.

   :returns: the flag's value.
   

.. py:function:: target(name=None, deps=None, sources=None, generates=None, function=None, default=None, always=None, docs=None)

   Defines a new build target in the current package. Typically used as a
   decorator, in which case the decorated function is treated as the value
   of the function parameter.

   :param name: the name of the target.
   :param deps: the target's dependencies. Must be a sequence whose elements
                are either labels or other build targets.
   :param sources: the target's source files. Must be a sequence of strings.
                   Each string will be interpreted relative to the package's
                   directory (if the path is relative) or project root (if
                   the path is absolute).
   :param generates: any files generated by the targets. Must be a sequence of
                     strings. Paths are interpreted identically to those in
                     the sources parameter.
   :param function: the target's callback function. If this parameter is None,
                    target returns a decorator function rather than a target.
   :param default: True if the target is its package's default target.
   :param always: True if the target should always be considered out-of-date.
   :param docs: the docs for the target. Normally picked up from the
                function's docstring.

   :returns: the new build target object or a decorator if function is None.
   

.. py:function:: glob(include, exclude=None)

   Return a list of paths relative to the calling module's directory that match
   the given include and exclude patterns. Typically passed to the sources parameter
   of target.

   - `*` matches any number of non-path-separator characters
   - `**` matches any number of any characters
   - `?` matches a single character

   :param include: the patterns to include.
   :param exclude: the patterns to exclude.

   :returns: the matched paths
   

.. py:function:: get_target(label)

   Gets the target with the given label, if it exists.

   :param: label: the target's label.

   :returns: the target with the given label.
   

.. py:function:: flags()

   Lists the project's flags.
   

.. py:function:: targets()

   Lists the project's targets.
   

.. py:function:: sources()

   Lists the project's sources.
   

.. py:function:: run(label_or_target, always=None, dry_run=None, callback=None)

   Builds a target.

   :param label_or_target: the label or target to run.
   :param always: True if all targets should be considered out-of-date.
   :param dry_run: True if the targets to run should be displayed but not run.
   :param callback: a callback that receives build events. If absent,
                    events will be displayed using the default renderer.
   


